generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Property {
  id              String            @id @default(cuid())
  userId          String
  name            String
  description     String
  address         String
  propertyType    String            
  price           Float
  bedrooms        Int
  bathrooms       Float
  size            Float             
  images          String[]
  features        String[]          
  status          String            
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  units           Unit[]
  maintenanceReqs MaintenanceReq[]
  documents       Document[]
  expenses        Expense[]

  @@index([userId])
  @@map("properties")
}

model Unit {
  id          String    @id @default(cuid())
  propertyId  String
  property    Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  unitNumber  String
  floor       Int?
  size        Float?    
  bedrooms    Int?
  bathrooms   Float?
  rent        Float?
  deposit     Float?
  status      String    
  features    String[]
  tenant      Tenant?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([propertyId, unitNumber])
  @@index([status])
  @@map("units")
}

model Tenant {
  id              String            @id @default(cuid())
  userId          String            
  unitId          String            @unique
  unit            Unit              @relation(fields: [unitId], references: [id], onDelete: Cascade)
  firstName       String
  lastName        String
  email           String
  phone           String
  emergencyContact String?
  leaseStart      DateTime
  leaseEnd        DateTime
  rentAmount      Float
  depositAmount   Float
  paymentDue      Int               
  status          String            
  documents       Document[]
  maintenanceReqs MaintenanceReq[]
  payments        Payment[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([userId])
  @@index([email])
  @@index([status])
  @@map("tenants")
}

model MaintenanceReq {
  id          String    @id @default(cuid())
  propertyId  String
  property    Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  title       String
  description String
  priority    String    
  category    String    
  status      String    
  assignedTo  String?   
  cost        Float?
  images      String[]
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  @@index([status])
  @@index([priority])
  @@map("maintenance_requests")
}

model Comment {
  id          String         @id @default(cuid())
  requestId   String
  request     MaintenanceReq @relation(fields: [requestId], references: [id], onDelete: Cascade)
  userId      String         
  content     String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([requestId])
  @@map("comments")
}

model Document {
  id          String    @id @default(cuid())
  propertyId  String
  property    Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  tenantId    String?
  tenant      Tenant?   @relation(fields: [tenantId], references: [id])
  name        String
  type        String    
  category    String    
  url         String
  fileSize    Int?      
  mimeType    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([propertyId])
  @@index([tenantId])
  @@index([type])
  @@map("documents")
}

model Payment {
  id          String    @id @default(cuid())
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  amount      Float
  type        String    
  status      String    
  method      String    
  reference   String?   
  dueDate     DateTime
  paidDate    DateTime?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([tenantId])
  @@index([status])
  @@index([dueDate])
  @@map("payments")
}

model Expense {
  id          String    @id @default(cuid())
  propertyId  String
  property    Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  category    String    
  amount      Float
  date        DateTime
  description String
  receipt     String?   
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([propertyId])
  @@index([category])
  @@index([date])
  @@map("expenses")
}

model Notification {
  id          String    @id @default(cuid())
  userId      String    
  title       String
  message     String
  type        String    
  read        Boolean   @default(false)
  link        String?   
  createdAt   DateTime  @default(now())

  @@index([userId])
  @@index([read])
  @@map("notifications")
}